# Workflow intended to crossbuild binary artifacts and create a new release.

on:
  push:
    branches:
      - "release/**"
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

env:
  GO_VERSION: 1.21.1
  BINARY_ARTIFACT_NAME: "windows-cni-binaries"
  RELEASE_NOTES_ARTIFACT_NAME: "windows-cni-release-notes"

permissions:
  contents: read

jobs:
  build:
    name: Crossbuild Binary Release
    runs-on: ubuntu-22.04

    outputs:
      version: ${{ steps.getrelease.outputs.version }}
      binaries_artifact: ${{ env.BINARY_ARTIFACT_NAME }}-${{ steps.getrelease.outputs.version }}
      release_notes_artifact: ${{ env.RELEASE_NOTES_ARTIFACT_NAME}}-${{ steps.getrelease.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Get Release Version
        id: getrelease
        run: |
          ref=${{ github.ref }}
          # Extract version from tag, preserving the 'v' prefix for consistency
          if [[ "$ref" =~ ^refs/tags/v[0-9] ]]; then
            version="${ref#refs/tags/}"
          else
            # Fallback to commit ID if not a version tag
            version=$(git show -s --format=%H | cut -c -12)
          fi
          echo "Determined version: ${version}"
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check Tag Signed
        run: |
          releasever="${{ steps.getrelease.outputs.version }}"
          TAGCHECK=$(git tag -v ${releasever} 2>&1 >/dev/null) ||
          echo "${TAGCHECK}" | grep -q "error" && {
              echo "::warning::tag ${releasever} is not a signed tag!"
          } || {
              echo "Tag ${releasever} is signed."
          }

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Make Binary Release
        shell: bash
        run: |
          make release "VERSION=${{ steps.getrelease.outputs.version }}"

      - name: Make Release Notes
        run: |
          version="${{ steps.getrelease.outputs.version }}"
          git tag -l ${version#refs/tags/} -n20000 | tail -n +3 | cut -c 5- >release-notes.md

      - name: Upload Release Notes
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.RELEASE_NOTES_ARTIFACT_NAME }}-${{ steps.getrelease.outputs.version }}
          path: release-notes.md

      - name: Upload Binary Release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_ARTIFACT_NAME }}-${{ steps.getrelease.outputs.version }}
          path: release/*

  ci:
    name: CI
    # NOTE(aznashwan, Sep 4th 2023): GitHub actions do not currently support referencing
    # or evaluating `env` variables in the `uses` clause, but this will
    # ideally be added in the future in which case the hardcoded reference to the
    # upstream CNI repository should be replaced with the following to
    # potentially allow contributors to enable tests on forks as well:
    # uses: "${{ github.repository }}/.github/workflows/ci.yml@${{ github.ref_name }}"
    uses: "Microsoft/windows-container-networking/.github/workflows/ci.yml@master"

  release:
    name: Create CNI Binaries Release
    needs: [build, ci]
    # NOTE: only release on pushes to release tags:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - name: Download Release Notes and Build
        uses: actions/download-artifact@v3
        with:
          path: builds

      - name: Validate Release Artifacts
        run: |
          echo "Validating release artifacts..."
          ls -la builds/${{ needs.build.outputs.binaries_artifact }}/

          # Check that the zip file follows the expected naming convention
          expected_zip="windows-container-networking-cni-amd64-${{ needs.build.outputs.version }}.zip"
          if [ ! -f "builds/${{ needs.build.outputs.binaries_artifact }}/$expected_zip" ]; then
            echo "Error: Expected zip file $expected_zip not found!"
            echo "Available files:"
            ls -la builds/${{ needs.build.outputs.binaries_artifact }}/
            exit 1
          fi

          # Verify checksums exist
          for file in builds/${{ needs.build.outputs.binaries_artifact }}/*.zip; do
            if [ ! -f "$file.sha256" ]; then
              echo "Error: SHA256 checksum missing for $file"
              exit 1
            fi
            if [ ! -f "$file.sha512" ]; then
              echo "Error: SHA512 checksum missing for $file"
              exit 1
            fi
          done

          echo "All artifacts validated successfully"

      - name: Check for Existing Release
        id: check_release
        run: |
          # Check if release already exists
          if gh release view "${{ needs.build.outputs.version }}" >/dev/null 2>&1; then
            echo "Release ${{ needs.build.outputs.version }} already exists!"
            echo "Please delete the existing release first or use a different version."
            exit 1
          fi
          echo "Release ${{ needs.build.outputs.version }} does not exist, proceeding..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release Information
        run: |
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Tag: ${{ github.ref }}"
          echo "Release Name: windows-cni ${{ needs.build.outputs.version }}"
          echo ""
          for file in builds/${{ needs.build.outputs.binaries_artifact }}/*; do
            if [ -f "$file" ]; then
              echo "File: $(basename "$file")"
              echo "Size: $(stat -c%s "$file") bytes"
              if [[ "$file" == *.zip ]]; then
                echo "SHA256: $(cat "$file.sha256" 2>/dev/null | awk '{print $1}')"
                echo "SHA512: $(cat "$file.sha512" 2>/dev/null | awk '{print $1}')"
              fi
              echo "---"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          name: windows-cni ${{ needs.build.outputs.version }}
          tag_name: ${{ needs.build.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          body_path: ./builds/${{ needs.build.outputs.release_notes_artifact }}/release-notes.md
          files: |
            builds/${{ needs.build.outputs.binaries_artifact }}/*
